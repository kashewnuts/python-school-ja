==========================
シェルスクリプトの置き換え
==========================

シェルコマンドの実行
====================
`subprocess` モジュールを使うことでシェルコマンドを実行できます。

* `subprocess — Subprocess management`_ (公式ドキュメント)

.. _subprocess — Subprocess management: http://docs.python.org/library/subprocess.html

コマンドプロンプトで対話シェルに対して実行します。 (Windows)
::

    >>> import subprocess
    >>> subprocess.call("python -V")
    >>> args = ['python', '-V']
    >>> subprocess.call(args)

Linux で実行する場合にはシェルコマンドを渡します。
::

    >>> import subprocess
    >>> subprocess.call("ls")
    >>> args = ['ls', '/var/log']
    >>> subprocess.call(args)

`subprocess` モジュールは以下のモジュールの置き換えになりますので、
ちょっと古いブログ記事などを読む場合は気をつけましょう。

* os.system
* os.spawn*
* os.popen*
* popen2.*
* commands.*

環境変数の扱い
==============
os.environ で環境変数を設定、参照できます。
::

    >>> import os
    >>> for k, v in os.environ.iteritems():
    ...     print "%-20s\t%s" % (k, v)
    ...

パスの扱い
==========
``os.path`` モジュールを使います。
``import os.path`` ではなく、 ``import os`` として使うようにしましょう。

`os.path`_ ::

    posixpath や macpath のように、システムごとに対応付けられているパス名操作のためのシステム依存の標準モジュールです。
    すなわち、正しく import が行われるかぎり、 os.path.split(file) は posixpath.split(file) と等価でありながらより汎用性があります。
    このモジュール自体が import 可能なモジュールでもあるので注意してください。
    : os.path として直接 import してもかまいません。 

.. _os.path: http://www.python.jp/doc/2.4/lib/module-os.html

パスを連結するためには ``os.path.join`` を使います。
JAVA のホームディレクトリから :command:`javap` にアクセスするコードは次のように記述できます。
環境変数 *JAVA_HOME* は事前に設定しておきましょう。
::

    >>> import os
    >>> import subprocess
    >>> cmd = os.path.join(os.environ['JAVA_HOME'], 'bin', 'javap')
    >>> args = [cmd, '-help']
    >>> subprocess.call(args)

ファイルシステムとのやり取り
============================
ディレクトリ内のファイル一覧を取得するためには ``os.listdir()`` を使います。
ファイルの最終更新時刻を取得するためには ``os.path.getmtime()`` を使います。

カレントディレクトリのファイルを古い順に並べるには次のコードを実行します。
::

    >>> import datetime
    >>> import os
    >>> files = [f for f in os.listdir('.')]
    >>> files.sort(lambda a, b: int(os.path.getmtime(a) - os.path.getmtime(b)))
    >>> for f in files:
    ...     print "%-20s\t%s" % (f, datetime.datetime.fromtimestamp(os.path.getmtime(f)))

リストに対するソート関数についてはこちらの記事を参照してください。

* Sorting Mini-HOWTO （和訳）: http://www.python.jp/Zope/articles/tips/sorthowto

カレントディレクトリ配下のディレクトリごとのファイル種類 (拡張子) の数を表示します。
(:file:`count-files-per-suffix.py`)

.. literalinclude:: ../count-files-per-suffix.py
   :lines: 3-33
   :encoding: utf-8

ファイル操作
============
ファイルをコピーするためには `shutil` モジュールの `copy` 関数を使います。

* `shutil — High-level file operations`_ (公式ドキュメント)

.. _shutil — High-level file operations: http://docs.python.org/library/shutil.html

公式ドキュメントのサンプルスクリプトに目を通しておきましょう。
アーカイブの作成方法なども掲載されています。

設定ファイルの扱い
==================
* Python スクリプトをそのまま使う (:file:`settings.py`)
* `ConfigParser`_ を使う (*.ini* 形式)
* JSON を使う (Python 2.6 から標準モジュール)
* YAML を使う (`pyyaml`_ をインストール)
* 自前で解析器を実装する (ダメなパターンが多い...)

.. _ConfigParser: http://docs.python.org/library/configparser.html
.. _pyyaml: http://pyyaml.org/wiki/PyYAML

手っ取り早く始めるためには Python スクリプトをそのまま使いましょう。
Django の設定ファイルを参考にしてください。

リモートファイルの取得
======================
ダウンローダーやクローラーなどを実装する基礎を考えます。
標準ライブラリには ``urllib`` と ``urllib2`` があり、この辺りの経緯は色々とややこしいので、
Python に詳しい人に口頭で確認してください。
ブログ記事などは参照する場合は、Python のどのバージョンを対象にしているかを *必ず* 確認してください。

標準ライブラリ

* `urllib — Open arbitrary resources by URL`_ - (公式ドキュメント)

.. note::

    `httplib -- HTTP プロトコルクライアント`_

        通常、このモジュールは直接使いません

.. literalinclude:: ../request-ex01.py
   :encoding: utf-8
   :lines: 3-32

サードパーティーライブラリもあります。

* `httplib2`_
* `requests`_


.. _urllib — Open arbitrary resources by URL: http://docs.python.org/library/urllib.html
.. _httplib -- HTTP プロトコルクライアント: http://www.python.jp/doc/2.4/lib/module-httplib.html
.. _httplib2: http://code.google.com/p/httplib2/
.. _requests: http://pypi.python.org/pypi/requests
