==========================
CSV ファイルの処理方法 - 5
==========================
データの並びをデータ自体に埋め込んで管理することもできます。
データファイルの１行目に、それぞれのフィールドの意味を記述しておきます。
データのポータビリティは高くなりますが、
プログラムから処理する場合には特殊処理が必要になります。

先頭ヘッダーを使う場合
======================
ファイル風オブジェクトの ``next()`` メソッドを使います。
「ファイル風オブジェクト」とは Java の入出力ストリームみたいなものだと考えておいてください。
繰り返し処理を抽象化しておくことで、ファイルから読み込む場合も文字列を読み込む場合も、
同じインターフェイスを利用できます。
文字列をファイル風オブジェクトとして使うには ``StringIO`` モジュールを使います。
(C 拡張で実装された ``cStringIO`` モジュールもありますが、Unicode の扱いが異なりますので注意しましょう。)

まずは CSV ファイルの先頭行にフィールド名を記述しておきます。

:file:`csv-5.csv`

.. literalinclude:: ../etc/csv-5.csv

次に、 ``UnicodeReader`` の ``next()`` を使ってヘッダー行を保存しておき、
データを読み込む度に ``zip()`` で組み合わせて辞書形式に変換します。

:file:`csv-5.py`

.. literalinclude:: ../src/csv-5.py
   :language: python

差分 ::

    $ diff -U 1 csv-4.py csv-5.py
    @@ -12,3 +12,2 @@
     DEFAULT_CSV_FILE = 'sample.csv'
    -LEAGUE_STATS = ('rank', 'team', 'point', 'match', 'goaldiff')
     
    @@ -19,4 +18,7 @@
         with open(fname) as reader:
    -        for row in UnicodeReader(reader):
    -            record = dict(zip(LEAGUE_STATS, row))
    +        stream = UnicodeReader(reader)
    +        # Read a header line.
    +        fields = stream.next()
    +        for row in stream:
    +            record = dict(zip(fields, row))
                 print record['rank'] + '\t' + \

DictReader を使う
=================
標準 csv モジュールには ``DictReader`` クラスがあります。
ユニコード対応は一度切り落として、このクラスを使って再実装してみましょう。

:file:`csv-5a.py`

.. literalinclude:: ../src/csv-5a.py
   :language: python

ヘッダー行を自動的に解釈してくれますので、場合によっては便利なモジュールだと言えます。
全てにおいて万能な実装はありませんので、ケースバイケースで必要な機能を取捨選択できるようになりましょう。
