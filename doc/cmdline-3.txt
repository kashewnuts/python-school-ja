======================
コマンドライン操作 - 3
======================
プログラムの設定情報を管理する方法はたくさんあります。
ここでは、環境変数の利用と、設定ファイルの利用を紹介します。

モジュールが環境変数を参照することもあります。
よく使うモジュールでは `urllib2` が挙げられます。
プロキシを使った環境がある場合は、実際に動作を確認してみましょう。

環境変数の扱い
==============
os.environ で環境変数を設定、参照できます。
::

    >>> import os
    >>> for k, v in os.environ.iteritems():
    ...     print "%-20s\t%s" % (k, v)
    ...
    VERSIONER_PYTHON_PREFER_32_BIT  no
    TERM_PROGRAM_VERSION    299
    WINDOW                  1
    LOGNAME                 shigeru
    USER                    shigeru
    HOME                    /Users/shigeru
    PATH                    /Users/shigeru/projects/python-school-ja/bin:/opt/local/bin:/opt/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin
    PS1                     (python-school-ja)\n\e[1;4;33m\u \w\e[m [\#]\n$
    ( ... もっと続く ... )

インタープリタを起動する前に環境変数を設定しておくと、起動中にその値を参照できます。
サーバごとに設定値を変更したい場合には知っておくと便利でしょう。

設定ファイルの扱い
==================
* Python スクリプトをそのまま使う (:file:`settings.py` など)
* `ConfigParser`_ を使う (*.ini* / *.cfg* 形式)
* JSON を使う (Python 2.6 から標準モジュール)
* YAML を使う (`pyyaml`_ をインストール)
* 自前で解析器を実装する (ダメなパターンが多い...)

.. _ConfigParser: http://docs.python.org/library/configparser.html
.. _pyyaml: http://pyyaml.org/wiki/PyYAML

手っ取り早く始めるためには Python スクリプトをそのまま使いましょう。
構造については Django の設定ファイルを参考にすると良いでしょう。

:file:`settings.py` (geodjango の初期設定から抜粋)

.. literalinclude:: ../src/settings.py
   :encoding: utf-8
   :language: python


:file:`cmdline-3.py` (:file:`settings.py` は同じディレクトリに配置)

.. literalinclude:: ../src/cmdline-3.py
   :encoding: utf-8
   :language: python

実行結果 ::

    $ python cmdline-3.py
    <module 'settings' from '/Users/shigeru/projects/python-school-ja/src/settings.pyc'>
    ['DATABASES',
     'DEBUG',
     'LOGGING',
     'TEMPLATE_DEBUG',
     '__builtins__',
     '__doc__',
     '__file__',
     '__name__',
     '__package__']
    True
    {'default': {'ENGINE': 'django.contrib.gis.db.backends.postgis',
                 'HOST': 'DOTCLOUD_DB_SQL_HOST',
                 'NAME': 'template1',
                 'PASSWORD': 'DOTCLOUD_DB_SQL_PASSWORD',
                 'PORT': 12345,
                 'USER': 'DOTCLOUD_DB_SQL_LOGIN'}}
    {'disable_existing_loggers': False,
     'handlers': {'mail_admins': {'class': 'django.utils.log.AdminEmailHandler',
                                  'level': 'ERROR'}},
     'loggers': {'django.request': {'handlers': ['mail_admins'],
                                    'level': 'ERROR',
                                    'propagate': True}},
     'version': 1}

HTTP でダウンロード
===================
標準ライブラリには ``urllib`` と ``urllib2`` があります。
モジュール名に数字が付いていたり、Python 3 系では統合されてり、
この辺りの経緯は色々とややこしいので、Python に詳しい人に口頭で確認してください。
このため、ブログ記事などは参照するときは、Python のどのバージョンを対象にしているかを *必ず* 確認してください。

標準ライブラリ

* `urllib — Open arbitrary resources by URL`_ - (公式ドキュメント)

.. note::

    似た名称のライブラリとして `httplib` があります。これは使いません。

    `httplib -- HTTP プロトコルクライアント`_

        通常、このモジュールは直接使いません

引数で渡された URL のコンテンツをダウンロードする処理は次のように記述できます。

:file:`downloader.py`

.. literalinclude:: ../src/downloader.py
   :encoding: utf-8
   :language: python

`urllib2` を使うときは、環境変数 *http_proxy* でプロキシサーバを設定できます。
環境変数の確認方法は上述のスクリプトを参照してください。
環境変数の設定方法は OS によって異なりますので、そのお作法に従ってください。

プロキシは自前でも設定できます。
公式ドキュメントにサンプルコードが掲載されていますので、一通り眺めてみると良いでしょう。

通信部分を柔軟に扱えるようにしたサードパーティーライブラリもあります。
必要に応じて利用すると便利ですが、様々なマシンで動かすためにはモジュールのポータビリティに注意してください。

* `httplib2`_
* `requests`_

.. _urllib — Open arbitrary resources by URL: http://docs.python.org/library/urllib.html
.. _httplib -- HTTP プロトコルクライアント: http://www.python.jp/doc/2.4/lib/module-httplib.html
.. _httplib2: http://code.google.com/p/httplib2/
.. _requests: http://pypi.python.org/pypi/requests

