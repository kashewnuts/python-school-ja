======================
コマンドライン操作 - 5
======================
*SSH* を使ってリモートのサーバを操作してみます。

今回と次回は Linux サーバとのやり取りを想定しています。
(Mac OSX でも構いません。Windows しか使わない / 使えない場合はスキップしてください。)

リモートサーバの操作
====================
``ssh`` コマンドを ``subprocess.call()`` に渡します。 ::

    >>> import subprocess
    >>> subprocess.call(["ssh", "localhost"])
    ssh: connect to host localhost port 22: Connection refused
    255

localhost では sshd を立ち上げていないので、接続を拒否しています。

sshd を起動してから再度実行します。 ::

    >>> subprocess.call(["ssh", "localhost"])
    Password:
    Last login: Mon Dec 12 23:28:03 2011 from localhost
    SK-MackBook-Pro:~ shigeru$

sshd の引数でコマンドを渡すと、ログインした先で実行されます。 ::

    >>> subprocess.call(["ssh", "localhost", "uname", "-v"])
    Password:
    Could not open a connection to your authentication agent.
    Darwin Kernel Version 11.2.0: Tue Aug  9 20:54:00 PDT 2011; root:xnu-1699.24.8~1/RELEASE_X86_64
    0

あとはコマンドを羅列していけば構いません。

paramiko を使う
===============
SSH2 プロトコルを扱うモジュールとして `paramiko` があります。
コマンドを単に羅列するよりもプラグラマブルに管理できます。

* `paramiko`_

.. _paramiko: http://www.lag.net/paramiko/

:file:`requirements.txt` に *paramiko* を追加し、 :command:`pip` でインストールします。 ::

    $ source bin/activate
    $ pip install -r requirements.txt

.. note::

    :file:`requirements.txt` に追加。 ::

        paramiko

モジュールが読み込めることを確認します。
(すべてを表示すると多すぎるので、大文字の "SSH" から始まるものを抜粋) ::

    >>> import paramiko
    >>> filter(lambda s: s.startswith("SSH"), dir(paramiko))
    ['SSHClient', 'SSHConfig', 'SSHException']

サーバにログインして :command:`uptime` コマンドを実行します。

:file:`cmdline-5.py`

.. literalinclude:: ../src/cmdline-5.py
   :encoding: utf-8
   :language: python

``paramiko.Transport`` を使っていますが ``paramiko.SSHClient`` でも実現できます。
興味があれば、様々な API を使ってみてください。

また、上記のスクリプトは ``raw_input()`` と `getpass` モジュールを使っています。

* `15.10. getpass — Portable password input`_ (公式ドキュメント)

.. _15.10. getpass — Portable password input: http://docs.python.org/library/getpass.html

ユーザーからの入力を受け付ける方法には ``input()`` もあります。
ケースバイケースで使い分けるようにしましょう。

