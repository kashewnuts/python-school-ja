==================
ファイルを読み込む
==================
カンマ区切りの :file:`csv-1.csv` を読み込んで、タブ区切りに変更するスクリプトを実装します。

:file:`csv-1.csv`

.. literalinclude:: /../etc/csv-1.csv

自力で実装する方法
==================
基本的な部分から学習するために、簡単な CSV の処理を自力で実装します。
``open()`` でファイルを開き、イテレータを使って CSV 形式 (カンマ区切りテキスト) のファイルを読み込みます。
新しいバージョンの Python だけをターゲットにする場合は、
``with`` を使うことでリソースリークなどを予防できます。

:file:`csv-1.py`

.. literalinclude:: /../src/csv-1.py
   :language: python

実行結果 ::

    > python csv-1.py csv-1.csv
    2011-03-11      Earthquake
    2011-06-06      World IPv6 Day
    2011-11-11      Eleven Eleven
    2011-12-10      total lunar eclipse     not solar eclipse

このスクリプトでは、入力データに意図しないカンマが混入した場合に想定外の出力となります。
このスクリプトを改善しても構いませんが、次からは標準モジュールを使っていきましょう。

そもそも CSV とは何か？
=======================
インターネットにおけるデータ交換方式、という観点からは RFC で規定されています。

* :rfc:`4180` (Common Format and MIME Type for Comma-Separated Values (CSV) Files)

しかし、一般に広く普及している形式は Microsoft Excel が書き出す形式であり、
RFC 4180 と等価ではありません。
記号のエスケープルールや、暗黙的な型変換に違いがあります。

:`Comma-Separated Values`_ - ja.wikipedia.org:

    レコードにコンマやダブルクォートが含まれている場合、エスケープされている場合でも、ソフトによって解釈が異なり、区切り方が変わることがある。
    その結果、データが破壊されることや、修正の手間が生じることがある。
    レコードにタブ文字が含まれている場合よりも、レコードにコンマやダブルクォートが含まれている場合のほうが多い。
    従って、CSVの代わりに、タブ区切りテキスト形式（TSV）を使うことで問題を避けられることがある。

また、数値をダブルクォートで囲まない場合、小数点の記号と混同される地域もあります。
たとえば、Windows のパソコンでロケールをフランス語にして Excel を使うと、カンマが小数点の区切り文字になります。

:`小数点`_ - ja.wikipedia.org:

    また非英語圏の国においては、コンマ (,) が小数点として用いられ、ピリオド (.) が3桁ごとの位取りに用いられる。
    すなわち、日本と逆である。

.. _Comma-Separated Values: http://ja.wikipedia.org/wiki/Comma-Separated_Values
.. _小数点: http://ja.wikipedia.org/wiki/%E5%B0%8F%E6%95%B0%E7%82%B9

したがって、「CSV でデータをください」という話題が出た場合には注意しましょう。
一見簡単そうですが、細かい部分に違いがあります。
可能ならば JSON (:rfc:`4627`) のように構造化されてデータ型に制限のあるフォーマットを検討してください。
人間が読み書きするデータとコンピュータが読み書きするデータは、処理の難易度が必ずしも等価でないことに気をつけましょう。
