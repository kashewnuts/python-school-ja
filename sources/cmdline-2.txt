======================
コマンドライン操作 - 2
======================
異なるディレクトリの情報を扱うために、パスの扱いを確認します。

パスを連結する
==============
``os.path.join()`` を使うことで、パス区切り文字を意識せずにファイルパスを扱えます。
引数の数は可変長になっていますので、３つや４つもそのまま連結できます。
::

    >>> import os
    >>> os.path.join(".", "src", "pyschool")
    './src/pyschool'

モジュールのインポートでは下位パッケージまで指定することが一般的ですが、
`os.path` に限っては `os` だけをインポートした方が良いでしょう。
実際に読み込むファイルは実行環境に依存するためです。
詳細は難しいかもしれませんが、「インポートするにもいくつかの方法がある」と覚えておきましょう。

`os.path`_ ::

    posixpath や macpath のように、システムごとに対応付けられているパス名操作のためのシステム依存の標準モジュールです。
    すなわち、正しく import が行われるかぎり、 os.path.split(file) は posixpath.split(file) と等価でありながらより汎用性があります。
    このモジュール自体が import 可能なモジュールでもあるので注意してください。 : os.path として直接 import してもかまいません。

.. _os.path: http://www.python.jp/doc/2.4/lib/module-os.html

ファイル操作いろいろ
====================
ファイルをコピーするためには `shutil` モジュールの ``copy()`` 関数を使います。

* `shutil — High-level file operations`_ (公式ドキュメント)

.. _shutil — High-level file operations: http://docs.python.org/library/shutil.html

::

    >>> import shutil
    >>> shutil.copy("README.rst", "README.rst.backup")
    >>> imort os
    >>> os.system("ls README*")
    README.rst              README.rst.backup
    0

公式ドキュメントのサンプルスクリプトに目を通しておきましょう。
アーカイブの作成方法なども掲載されています。

ファイルシステムの階層を辿る
============================
``os.walk()`` を使うことで階層的にファイルシステムを走査できます。
使い方は独特なので、公式ドキュメントの例にも目を通しておいてください。

* `os — Miscellaneous operating system interfaces (os.walk)`_

.. _`os — Miscellaneous operating system interfaces (os.walk)`: http://docs.python.org/library/os.html?highlight=os.walk#os.walk

カレントディレクトリ配下にある XML ファイルの一覧を出力すると、次のようになります。
::

    >>> imort os
    >>> for root, dirs, files in os.walk("."):
    ...     xmls = filter(lambda f: f.endswith(".xml"), files)
    ...     for xml in xmls:
    ...         print os.path.join(root, xml)
    ...
    ./lib/python2.7/site-packages/sphinx/themes/basic/opensearch.xml

宿題
====
バージョン管理されたディレクトリには、 ".svn" や ".git" のようなディレクトリが存在します。
``os.walk()`` を使ったときに、これらを除外するスクリプトを記述してみましょう。

