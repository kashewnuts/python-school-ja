======================
ドキュメントの構成方法
======================
ドキュメント作成ツールとして `Sphinx`_ を使います。

Sphinx
======
Sphinx は `reStructuredText`_ (reST) 形式のファイルを
多様な出力形式に変換するドキュメントビルダーです。
変換可能な出力形式は HTML, PDF, ePub, などがあり、自分で独自のビルダーを定義することもできます。
HTML 出力ではテーマを切り替えることができますが、自分でカスタマイズもできます。

.. note::

    「MySQL」や「全文検索」という文脈で使われる "Sphinx" は別のモノです。
    O'Reilly から出版されている Sphinx の書籍は全文検索の方ですから注意しましょう。

Python のドキュメンテーションで使われることが多いですが、
Python 以外のプロジェクトでも採用が活発化してきています。

* `Projects using Sphinx`_
* `Sphinxを使用しているサイト`_

.. _Sphinx: http://sphinx.pocoo.org/
.. _reStructuredText: http://docutils.sourceforge.net/rst.html
.. _Projects using Sphinx: http://sphinx.pocoo.org/examples.html
.. _Sphinxを使用しているサイト: http://sphinx-users.jp/example.html

環境構築
========
*virtualenv* を有効にした環境で、Sphinx パッケージをインストールします。
依存関係を明示するために :file:`requirements.txt` を作成し、 :command:`pip` で読み込ませます。 ::

    > Scripts\activate
    > notepad requirements.txt
    > pip install -r requirements.txt

.. note::

    :file:`requirements.txt` ::

        Sphinx

:file:`Scripts` フォルダに次の２つのファイルがあれば OK です。
(インストールされるファイルはもう少したくさんあります)

* :file:`sphinx-build.exe` - reST を変換するプログラム
* :file:`sphinx-quickstart.exe` - プロジェクトを生成するプログラム

具体的な方法は以下のリンクを参照してください。

* `プロジェクトを作る`_ - Sphinx-Users.jp

.. _プロジェクトを作る: http://sphinx-users.jp/gettingstarted/make_project.html

まずは書いてみる
================
「何を」「どうやって」「いつまでに」書くかを忘れないように記録しておきましょう。
目的・目標がはっきりしている場合には「誰に向けて」「どこで共有する」かも明示しましょう。
これによって文体や体裁も変わってきます。
書いているうちに目的がブレルこともあるでしょうから、定期的に「なぜ」を繰り返すようにしましょう。

まずは、こうした内容を :file:`index.txt` (or :file:`index.rst`) に書いてみてください。

構成を考える
------------

冗長性を排除する
----------------

自動化できる手順はスクリプトにまとめる
--------------------------------------

他の人が見えるようにする
========================
